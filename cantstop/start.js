onload = start;

async function start() { test3(); }

async function test3() {
	let di = probabilities();
	console.log('di', di);

	let arr=[];
	for (const a of range(2, 12)) {
		for (const b of range(a+1, 12)) {
			for (const c of range(b+1, 12)) {
				let res = calcp4DiceSumOf2AnyOf3(a, b, c);
				let frac = simplifyFraction(res.guenst, res.moeg);
				addKeys({a,b,c,frac},res);
				//res.frac=frac;
				arr.push(res);
				//console.log('result', a,b,c, `${frac[0]}/${frac[1]}`, `${Math.round(res.p * 100)}%`, `${res.p * 100}%`);
			}
		}
	}
	sortByDescending(arr,'p');
	let arr2=arr.map(x=>[x.a,x.b,x.c,Math.round(x.p*100)]);
	console.log('arr',arr2);
	console.log('probs',probarr())
	//console.log('arr',arr.map(x=>`${x.a},${x.b},${x.c}: ${x.p},${x.frac[0]/x.frac[1]}`))
}

async function test2() {
	let di = probabilities();
	console.log('di', di);

	for (const n of range(2, 12)) {
		let res = calcp4DiceSumOf2(n); //calcp3DiceSumOf2(n)
		let frac = simplifyFraction(res.guenst, res.moeg);
		//console.log('result',n,frac[0],'/',frac[1]); //`${frac[0]}/${frac[1]}`);
		console.log('result', n, `${frac[0]}/${frac[1]}`, `${Math.round(res.p * 100)}%`, `${res.p * 100}%`);
	}
}
async function test1() {
	let di = probabilities();
	console.log('di', di);

	for (const n of range(2, 12)) {
		let res = calcp2DiceSum(n);
		let frac = simplifyFraction(res.guenst, res.moeg);
		//console.log('result',n,frac[0],'/',frac[1]); //`${frac[0]}/${frac[1]}`);
		console.log('result', n, `${frac[0]}/${frac[1]}`);
	}
}
async function test0() {

	let d = mDom(document.body, { margin: 25 });
	for (const x of range(2, 12)) {
		mButton(x, addToCounterAndEvaluate, d, { classes: 'input', w: 40, maleft: 4 });
		//if (x%3== 1)mNewline(d);
	}
	mNewline(d);
	mButton('Clear', () => { DA.counter = 0; DA.pegs = []; showResult('start!') }, d, { classes: 'input', w: 80, maleft: 4 });

}
function addToCounterAndEvaluate(ev) {
	let n = Number(ev.target.innerHTML);
	if (nundef(DA.counter)) { DA.counter = 0; DA.pegs = []; }
	let vals = [0, 0, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6];
	let pegs = DA.pegs;
	let val = pegs.includes(n) ? vals[n] : vals[n] * 2;
	if (pegs.length < 3) addIf(pegs, n);
	DA.counter += val;
	showResult(`Counter: ${DA.counter} ${DA.counter >= 28 ? 'STOP!' : 'weiter'} (pegs:[${pegs.join(',')}])`);
	console.log(n);
}
function showResult(msg) {
	let d = mBy('dMessage');
	if (nundef(d)) d = mDom(document.body, { classes: 'section', w: 44 * 11 + 4, maleft: 25 }, { id: 'dMessage' });
	d.innerHTML = msg;

}
function probabilities() {
	let probs = [
		92.0, 6, 7, 8,
		91.4, 6, 7, 9,
		91.4, 5, 7, 8,
		91.1, 6, 8, 10,
		91.1, 4, 6, 8,
		90.3, 6, 7, 10,
		90.3, 4, 7, 8,
		89.5, 6, 8, 9,
		89.5, 5, 6, 8,
		89.3, 6, 7, 11,
		89.3, 5, 7, 10,
		89.3, 4, 7, 9,
		89.3, 3, 7, 8,
		89.0, 6, 7, 12,
		89.0, 2, 7, 8,
		88.7, 7, 8, 9,
		88.7, 5, 6, 7,
		88.6, 7, 8, 10,
		88.6, 4, 6, 7,
		88.3, 6, 8, 12,
		88.3, 4, 8, 10,
		88.3, 4, 6, 10,
		88.3, 2, 6, 8,
		87.7, 4, 7, 10,
		86.7, 5, 8, 9,
		86.7, 5, 6, 9,
		86.5, 7, 8, 11,
		86.5, 3, 6, 7,
		86.4, 7, 8, 12,
		86.4, 5, 8, 10,
		86.4, 4, 6, 9,
		86.4, 2, 6, 7,
		86.3, 5, 6, 10,
		86.3, 4, 8, 9,
		85.3, 6, 8, 11,
		85.3, 5, 7, 9,
		85.3, 3, 6, 8,
		84.8, 7, 9, 10,
		84.8, 4, 5, 7,
		84.6, 6, 9, 10,
		84.6, 4, 5, 8,
		84.3, 5, 7, 11,
		84.3, 3, 7, 9,
		83.6, 5, 7, 12,
		83.6, 5, 6, 11,
		83.6, 4, 7, 11,
		83.6, 3, 8, 9,
		83.6, 3, 7, 10,
		83.6, 2, 7, 9,
		83.3, 5, 8, 12,
		83.3, 4, 7, 12,
		83.3, 4, 6, 11,
		83.3, 3, 8, 10,
		83.3, 2, 7, 10,
		83.3, 2, 6, 9,
		82.9, 6, 9, 12,
		82.9, 2, 5, 8,
		82.6, 5, 8, 11,
		82.6, 3, 6, 9,
		82.3, 5, 6, 12,
		82.3, 4, 9, 10,
		82.3, 4, 8, 11,
		82.3, 4, 5, 10,
		82.3, 3, 6, 10,
		82.3, 2, 8, 9,
		81.6, 6, 10, 12,
		81.6, 4, 6, 12,
		81.6, 2, 8, 10,
		81.6, 2, 4, 8,
		81.1, 4, 8, 12,
		81.1, 2, 6, 10,
		80.9, 7, 9, 12,
		80.9, 2, 5, 7,
		80.8, 6, 9, 11,
		80.8, 3, 5, 8,
		80.7, 7, 10, 12,
		80.7, 2, 4, 7,
		79.9, 5, 9, 10,
		79.9, 4, 5, 9,
		79.6, 8, 9, 10,
		79.6, 6, 10, 11,
		79.6, 4, 5, 6,
		79.6, 3, 4, 8,
		79.1, 7, 10, 11,
		79.1, 3, 4, 7,
		78.7, 7, 9, 11,
		78.7, 3, 5, 7,
		78.1, 2, 7, 12,
		77.9, 5, 10, 11,
		77.9, 4, 5, 11,
		77.9, 3, 9, 10,
		77.9, 3, 7, 12,
		77.9, 3, 4, 9,
		77.9, 2, 7, 11,
		77.6, 5, 9, 11,
		77.6, 3, 7, 11,
		77.6, 3, 5, 9,
		77.1, 8, 9, 11,
		77.1, 3, 5, 6,
		77.0, 8, 9, 12,
		77.0, 2, 5, 6,
		76.0, 5, 9, 12,
		76.0, 2, 5, 9,
		75.8, 8, 10, 12,
		75.8, 4, 9, 11,
		75.8, 3, 8, 11,
		75.8, 3, 6, 11,
		75.8, 3, 5, 10,
		75.8, 2, 4, 6,
		75.6, 6, 11, 12,
		75.6, 5, 10, 12,
		75.6, 4, 10, 11,
		75.6, 4, 9, 12,
		75.6, 3, 8, 12,
		75.6, 3, 4, 10,
		75.6, 2, 6, 11,
		75.6, 2, 5, 10,
		75.6, 2, 4, 9,
		75.6, 2, 3, 8,
		75.2, 7, 11, 12,
		75.2, 2, 3, 7,
		74.2, 8, 10, 11,
		74.2, 3, 4, 6,
		73.8, 4, 10, 12,
		73.8, 2, 8, 12,
		73.8, 2, 6, 12,
		73.8, 2, 4, 10,
		73.6, 3, 6, 12,
		73.6, 2, 8, 11,
		71.2, 5, 11, 12,
		71.2, 3, 9, 12,
		71.2, 2, 5, 11,
		71.2, 2, 3, 9,
		71.0, 4, 5, 12,
		71.0, 3, 9, 11,
		71.0, 3, 5, 11,
		71.0, 2, 9, 10,
		68.4, 8, 11, 12,
		68.4, 2, 3, 6,
		66.9, 9, 10, 11,
		66.9, 3, 4, 5,
		65.7, 9, 10, 12,
		65.7, 3, 10, 11,
		65.7, 3, 4, 11,
		65.7, 2, 4, 5,
		63.7, 3, 5, 12,
		63.7, 2, 9, 11,
		63.4, 4, 11, 12,
		63.4, 3, 10, 12,
		63.4, 2, 9, 12,
		63.4, 2, 5, 12,
		63.4, 2, 4, 11,
		63.4, 2, 3, 10,
		58.4, 9, 11, 12,
		58.4, 2, 3, 5,
		57.9, 3, 4, 12,
		57.9, 2, 10, 11,
		55.2, 2, 10, 12,
		55.2, 2, 4, 12,
		52.5, 3, 11, 12,
		52.5, 2, 3, 11,
		52.2, 10, 11, 12,
		52.2, 2, 3, 4,
		43.8, 2, 11, 12,
		43.8, 2, 3, 12,
	];

	//was will ich ueberhaupt?
	//sortedPegs = '2 3 11'
	//das soll der key sein!
	//match probability to sorted peg
	let di = {};
	for (const i of range(0, probs.length, 4)) {
		let val = probs[i];
		let arr = [probs[i + 1], probs[i + 2], probs[i + 3]];
		arr.sort();
		let key = arr.join(' ');
		di[key] = val;

	}
	return di;
}
function probarr() {
	let probs = [
		92.0, 6, 7, 8,
		91.4, 6, 7, 9,
		91.4, 5, 7, 8,
		91.1, 6, 8, 10,
		91.1, 4, 6, 8,
		90.3, 6, 7, 10,
		90.3, 4, 7, 8,
		89.5, 6, 8, 9,
		89.5, 5, 6, 8,
		89.3, 6, 7, 11,
		89.3, 5, 7, 10,
		89.3, 4, 7, 9,
		89.3, 3, 7, 8,
		89.0, 6, 7, 12,
		89.0, 2, 7, 8,
		88.7, 7, 8, 9,
		88.7, 5, 6, 7,
		88.6, 7, 8, 10,
		88.6, 4, 6, 7,
		88.3, 6, 8, 12,
		88.3, 4, 8, 10,
		88.3, 4, 6, 10,
		88.3, 2, 6, 8,
		87.7, 4, 7, 10,
		86.7, 5, 8, 9,
		86.7, 5, 6, 9,
		86.5, 7, 8, 11,
		86.5, 3, 6, 7,
		86.4, 7, 8, 12,
		86.4, 5, 8, 10,
		86.4, 4, 6, 9,
		86.4, 2, 6, 7,
		86.3, 5, 6, 10,
		86.3, 4, 8, 9,
		85.3, 6, 8, 11,
		85.3, 5, 7, 9,
		85.3, 3, 6, 8,
		84.8, 7, 9, 10,
		84.8, 4, 5, 7,
		84.6, 6, 9, 10,
		84.6, 4, 5, 8,
		84.3, 5, 7, 11,
		84.3, 3, 7, 9,
		83.6, 5, 7, 12,
		83.6, 5, 6, 11,
		83.6, 4, 7, 11,
		83.6, 3, 8, 9,
		83.6, 3, 7, 10,
		83.6, 2, 7, 9,
		83.3, 5, 8, 12,
		83.3, 4, 7, 12,
		83.3, 4, 6, 11,
		83.3, 3, 8, 10,
		83.3, 2, 7, 10,
		83.3, 2, 6, 9,
		82.9, 6, 9, 12,
		82.9, 2, 5, 8,
		82.6, 5, 8, 11,
		82.6, 3, 6, 9,
		82.3, 5, 6, 12,
		82.3, 4, 9, 10,
		82.3, 4, 8, 11,
		82.3, 4, 5, 10,
		82.3, 3, 6, 10,
		82.3, 2, 8, 9,
		81.6, 6, 10, 12,
		81.6, 4, 6, 12,
		81.6, 2, 8, 10,
		81.6, 2, 4, 8,
		81.1, 4, 8, 12,
		81.1, 2, 6, 10,
		80.9, 7, 9, 12,
		80.9, 2, 5, 7,
		80.8, 6, 9, 11,
		80.8, 3, 5, 8,
		80.7, 7, 10, 12,
		80.7, 2, 4, 7,
		79.9, 5, 9, 10,
		79.9, 4, 5, 9,
		79.6, 8, 9, 10,
		79.6, 6, 10, 11,
		79.6, 4, 5, 6,
		79.6, 3, 4, 8,
		79.1, 7, 10, 11,
		79.1, 3, 4, 7,
		78.7, 7, 9, 11,
		78.7, 3, 5, 7,
		78.1, 2, 7, 12,
		77.9, 5, 10, 11,
		77.9, 4, 5, 11,
		77.9, 3, 9, 10,
		77.9, 3, 7, 12,
		77.9, 3, 4, 9,
		77.9, 2, 7, 11,
		77.6, 5, 9, 11,
		77.6, 3, 7, 11,
		77.6, 3, 5, 9,
		77.1, 8, 9, 11,
		77.1, 3, 5, 6,
		77.0, 8, 9, 12,
		77.0, 2, 5, 6,
		76.0, 5, 9, 12,
		76.0, 2, 5, 9,
		75.8, 8, 10, 12,
		75.8, 4, 9, 11,
		75.8, 3, 8, 11,
		75.8, 3, 6, 11,
		75.8, 3, 5, 10,
		75.8, 2, 4, 6,
		75.6, 6, 11, 12,
		75.6, 5, 10, 12,
		75.6, 4, 10, 11,
		75.6, 4, 9, 12,
		75.6, 3, 8, 12,
		75.6, 3, 4, 10,
		75.6, 2, 6, 11,
		75.6, 2, 5, 10,
		75.6, 2, 4, 9,
		75.6, 2, 3, 8,
		75.2, 7, 11, 12,
		75.2, 2, 3, 7,
		74.2, 8, 10, 11,
		74.2, 3, 4, 6,
		73.8, 4, 10, 12,
		73.8, 2, 8, 12,
		73.8, 2, 6, 12,
		73.8, 2, 4, 10,
		73.6, 3, 6, 12,
		73.6, 2, 8, 11,
		71.2, 5, 11, 12,
		71.2, 3, 9, 12,
		71.2, 2, 5, 11,
		71.2, 2, 3, 9,
		71.0, 4, 5, 12,
		71.0, 3, 9, 11,
		71.0, 3, 5, 11,
		71.0, 2, 9, 10,
		68.4, 8, 11, 12,
		68.4, 2, 3, 6,
		66.9, 9, 10, 11,
		66.9, 3, 4, 5,
		65.7, 9, 10, 12,
		65.7, 3, 10, 11,
		65.7, 3, 4, 11,
		65.7, 2, 4, 5,
		63.7, 3, 5, 12,
		63.7, 2, 9, 11,
		63.4, 4, 11, 12,
		63.4, 3, 10, 12,
		63.4, 2, 9, 12,
		63.4, 2, 5, 12,
		63.4, 2, 4, 11,
		63.4, 2, 3, 10,
		58.4, 9, 11, 12,
		58.4, 2, 3, 5,
		57.9, 3, 4, 12,
		57.9, 2, 10, 11,
		55.2, 2, 10, 12,
		55.2, 2, 4, 12,
		52.5, 3, 11, 12,
		52.5, 2, 3, 11,
		52.2, 10, 11, 12,
		52.2, 2, 3, 4,
		43.8, 2, 11, 12,
		43.8, 2, 3, 12,
	];
	
	//was will ich ueberhaupt?
	//sortedPegs = '2 3 11'
	//das soll der key sein!
	//match probability to sorted peg
	let di = {};
	for (const i of range(0, probs.length, 4)) {
		let val = probs[i];
		let arr = [probs[i + 1], probs[i + 2], probs[i + 3]];
		arr.sort();
		let key = arr.join(' ');
		di[key] = val;

	}
	return [di,probs,probs.length/4,Object.keys(di).length];
}


